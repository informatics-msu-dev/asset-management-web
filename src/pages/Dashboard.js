import { useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { ref, onValue } from "firebase/database";
import { db } from "../firebase";
import { ChartArea, Archive, LogOut, XCircle, Package, UserCogIcon } from "lucide-react";
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, Cell, Legend } from "recharts";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";

const Dashboard = () => {
    const [repairRequests, setRepairRequests] = useState([]);
    const [topics, setTopics] = useState({}); // Mapping ‡∏£‡∏´‡∏±‡∏™‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á -> ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á
    const [selectedTopicId, setSelectedTopicId] = useState(null);
    const [selectedRepairs, setSelectedRepairs] = useState([]);
    const navigate = useNavigate();

    useEffect(() => {
        // Fetch repair requests
        onValue(ref(db, "‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°"), (snapshot) => {
            if (snapshot.exists()) {
                const data = Object.values(snapshot.val());
                setRepairRequests(data);
            }
        });

        // Fetch topics for mapping ‡∏£‡∏´‡∏±‡∏™‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á to ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á
        onValue(ref(db, "‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"), (snapshot) => {
            if (snapshot.exists()) {
                const topicData = snapshot.val();
                const topicMap = {};
                Object.values(topicData).forEach(topic => {
                    if (topic["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"] && topic["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"]) {
                        topicMap[topic["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"]] = topic["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"];
                    }
                });
                setTopics(topicMap);
            }
        });
    }, []);

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°
    const topicStats = repairRequests.reduce((acc, request) => {
        const topicId = request["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"] || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
        const room = request["‡∏´‡πâ‡∏≠‡∏á"] || request["room"] || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"; // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á "‡∏´‡πâ‡∏≠‡∏á" ‡πÅ‡∏•‡∏∞ "room"
        if (!acc[topicId]) {
            acc[topicId] = { total: 0, rooms: {} };
        }
        acc[topicId].total += 1;
        acc[topicId].rooms[room] = (acc[topicId].rooms[room] || 0) + 1;
        return acc;
    }, {});

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏°
    const roomStats = repairRequests.reduce((acc, request) => {
        const room = request["‡∏´‡πâ‡∏≠‡∏á"] || request["room"] || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"; // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á "‡∏´‡πâ‡∏≠‡∏á" ‡πÅ‡∏•‡∏∞ "room"
        const topicId = request["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"] || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
        const detail = request["‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°"] || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
        if (!acc[room]) {
            acc[room] = { total: 0, topics: {} };
        }
        acc[room].total += 1;
        acc[room].topics[topicId] = (acc[room].topics[topicId] || 0) + 1;
        acc[room].detail = detail;
        return acc;
    }, {});

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á
    const getTopicName = (topicId) => {
        return topics[topicId] || topicId;
    };

    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á (‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á)
    const topicChartData = Object.keys(topicStats).map(topicId => ({
        name: getTopicName(topicId),
        value: topicStats[topicId].total,
    }));

    // ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏°‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    const mostRepairedRoom = Object.keys(roomStats).reduce((maxRoom, room) => {
        return roomStats[room].total > roomStats[maxRoom].total ? room : maxRoom;
    }, Object.keys(roomStats)[0] || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏");

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î Pop-up
    const openPopup = (topicId) => {
        setSelectedTopicId(topicId);
        const repairs = repairRequests.filter(req => req["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"] === topicId);
        setSelectedRepairs(repairs);
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î Pop-up
    const closePopup = () => {
        setSelectedTopicId(null);
        setSelectedRepairs([]);
    };

    const downloadExcel = () => {
        if (!selectedRepairs.length) return;

        const wsData = [
            ["‡∏•‡∏≥‡∏î‡∏±‡∏ö", "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á", "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå", "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", "‡∏´‡πâ‡∏≠‡∏á", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°"],
            ...selectedRepairs.map((item, index) => [
                index + 1,
                getTopicName(item["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"]),
                item["‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå"],
                item["‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"],
                item["‡∏´‡πâ‡∏≠‡∏á"] || item["room"], // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á "‡∏´‡πâ‡∏≠‡∏á" ‡πÅ‡∏•‡∏∞ "room"
                item["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á"],
                item["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°"]
            ]),
        ];

        const ws = XLSX.utils.aoa_to_sheet(wsData);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°");

        const excelBuffer = XLSX.write(wb, { bookType: "xlsx", type: "array" });
        const dataBlob = new Blob([excelBuffer], { type: "application/octet-stream" });
        saveAs(dataBlob, `repair_stats_topic_${getTopicName(selectedTopicId)}.xlsx`);
    };

    const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042", "#AF19FF"];

    return (
        <div className="flex min-h-screen bg-pageBG">
            {/* Sidebar - ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏° */}
            <aside className="fixed top-0 left-0 w-64 h-screen text-white p-5 flex flex-col shadow-lg bg-sidebarBG">
                <h2 className="text-xl font-bold mb-6">‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏™‡∏î‡∏∏-‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå</h2>
                <ul className="space-y-4 flex-1">
                    <li>
                        <Link to="/dashboard" className="flex items-center p-2 rounded-lg bg-sidebarHover hover:bg-sidebarHover w-full text-left">
                            <ChartArea className="w-5 h-5 mr-3" /> ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°
                        </Link>
                    </li>
                    <li>
                        <Link to="/equipment" className="flex items-center p-2 rounded-lg hover:bg-sidebarHover w-full text-left">
                            <Archive className="w-5 h-5 mr-3" /> ‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
                        </Link>
                    </li>
                    <li>
                        <Link to="/supplies" className="flex items-center p-2 rounded-lg hover:bg-sidebarHover w-full text-left">
                            <Package className="w-5 h-5 mr-3" /> ‡∏û‡∏±‡∏™‡∏î‡∏∏
                        </Link>
                    </li>
                    <li>
                        <Link to="/registerUser" className="flex items-center p-2 rounded-lg hover:bg-sidebarHover w-full text-left">
                            <UserCogIcon className="w-5 h-5 mr-3" /> ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                        </Link>
                    </li>
                    <li>
                        <Link to="/adminInfo" className="flex items-center p-2 rounded-lg hover:bg-sidebarHover w-full text-left">
                            <UserCogIcon className="w-5 h-5 mr-3" /> ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
                        </Link>
                    </li>
                </ul>
                <button onClick={() => localStorage.removeItem("token") || navigate("/login")} className="flex items-center w-full text-left p-2 bg-logoutBT rounded-lg hover:bg-logoutBT-80 mt-auto">
                    <LogOut className="w-5 h-5 mr-3" /> ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
                </button>
            </aside>

            {/* Main Content */}
            <div className="ml-64 p-6 w-full">
                <h1 className="text-2xl font-bold mb-6 text-center">üìä Dashboard - ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°</h1>

                <div className="p-2 bg-gray-300 rounded-lg text-center mt-6">
                    <strong>‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏°‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:</strong> {mostRepairedRoom} ({roomStats[mostRepairedRoom]?.total || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
                </div>

                {/* ‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á */}
                <ResponsiveContainer width="100%" height={300}>
                    <BarChart data={topicChartData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        <Bar dataKey="value" fill="#8884d8">
                            {topicChartData.map((entry, index) => (
                                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                            ))}
                        </Bar>
                    </BarChart>
                </ResponsiveContainer>

                {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á */}
                <div className="grid grid-cols-1 gap-6 mt-6">
                    {Object.keys(topicStats).map((topicId, index) => (
                        <div key={index} className="bg-white p-4 shadow-lg rounded-lg w-full">
                            <h2 className="text-lg font-semibold mb-4 text-center">üìã ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏°: {getTopicName(topicId)}</h2>
                            <div className="grid grid-cols-2 gap-6">
                                {/* ‡∏Å‡∏£‡∏≤‡∏ü‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á */}
                                <div>
                                    <h3 className="text-md font-semibold mb-2">üè† ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°: {topicStats[topicId].total} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</h3>
                                    <ResponsiveContainer width="100%" height={200}>
                                        <BarChart data={Object.keys(topicStats[topicId].rooms).map(room => ({ name: room, count: topicStats[topicId].rooms[room] }))}>
                                            <XAxis dataKey="name" />
                                            <YAxis />
                                            <Tooltip />
                                            <Bar dataKey="count">
                                                {Object.keys(topicStats[topicId].rooms).map((room, i) => (
                                                    <Cell key={`cell-${i}`} fill={COLORS[i % COLORS.length]} />
                                                ))}
                                            </Bar>
                                        </BarChart>
                                    </ResponsiveContainer>
                                </div>
                                {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
                                <div>
                                    <h3 className="text-md font-semibold mb-2">‚ÑπÔ∏è ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</h3>
                                    <button
                                        onClick={() => openPopup(topicId)}
                                        className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg"
                                    >
                                        ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                                    </button>
                                </div>
                            </div>
                        </div>
                    ))}
                </div>

                {/* Pop-up */}
                {selectedTopicId && (
                    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
                        <div className="bg-white p-6 rounded-lg shadow-lg w-1/2">
                            <div className="flex justify-between items-center mb-4">
                                <h2 className="text-lg font-semibold">üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏° ‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á: {getTopicName(selectedTopicId)}</h2>
                                <button onClick={closePopup} className="text-red-500">
                                    <XCircle size={24} />
                                </button>
                            </div>
                            <table className="w-full border-collapse border border-gray-300">
                                <thead>
                                    <tr className="bg-gray-200">
                                        <th className="border border-gray-300 p-2">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠</th>
                                        <th className="border border-gray-300 p-2">‡∏´‡πâ‡∏≠‡∏á</th>
                                        <th className="border border-gray-300 p-2">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                                        <th className="border border-gray-300 p-2">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå</th>
                                        <th className="border border-gray-300 p-2">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {selectedRepairs.map((repair, i) => (
                                        <tr key={i} className="hover:bg-gray-100">
                                            <td className="border border-gray-300 p-2">{repair["‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°"]}</td>
                                            <td className="border border-gray-300 p-2">{repair["‡∏´‡πâ‡∏≠‡∏á"] || repair["room"]}</td>
                                            <td className="border border-gray-300 p-2">{repair["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°"]}</td>
                                            <td className="border border-gray-300 p-2">{repair["‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå"]}</td>
                                            <td className="border border-gray-300 p-2">{repair["‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"]}</td>          
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                            <button
                                onClick={downloadExcel}
                                className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 mt-4 rounded-lg w-full"
                            >
                                üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel
                            </button>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};

export default Dashboard;